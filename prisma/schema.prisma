// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int      @id @default(autoincrement())
  protocol          String
  filename          String
  name              String
  cpf               String
  birth             String
  rg                String
  organ             String
  uf                String
  title             String
  military          String
  nationality       String
  proficiency       String
  email             String
  tel               String
  zip               String
  address           String
  housenumber       String
  housecomplement   String?
  neighborhood      String
  city              String
  ufresidence       String
  position          String
  education         String
  course            String
  council           String
  councilnumber     String
  experience        Int
  deficiency        String
  deficiencyContext String?
  accumulation      String
  accumulationInfo  String?
  term              Boolean
  description       String?
  isValid           Boolean?
  notice            String?

  regraId Int? @unique          // Adicionado @unique para garantir a relação 1:1
  regra   RegrasAvaliacao?      @relation(fields: [regraId], references: [id]) // relação 1:1 com regra

  // Se quiser acessar a avaliação diretamente a partir do usuário:
  // avaliacao Avaliacao? @relation("UserAvaliacao")
}

model RegrasAvaliacao {
  id          Int         @id @default(autoincrement())
  regras_1  String? @db.Text
  regras_2  String? @db.Text
  regras_3  String? @db.Text
  regras_4  String? @db.Text
  regras_5  String? @db.Text
  description String?
  notice      String?

  usuario   User?         // relação reversa 1:1 (um usuário pode ter essa regra)
  avaliacao Avaliacao?    // cada regra tem uma avaliação associada
}

model Avaliacao {
  id             Int              @id @default(autoincrement())
  descricao      String
  nota_maxima    Int              @default(100)
  nota_inscrito  String?

  regraId        Int              @unique
  regra          RegrasAvaliacao @relation(fields: [regraId], references: [id], onDelete: Cascade)
}

model Admin {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(191)
  user_name String   @db.VarChar(191)
  password  String   @db.VarChar(191)
  roles     String   @db.VarChar(191)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
